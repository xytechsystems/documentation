{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Xytech REST API & Webhooks Guide","text":""},{"location":"REST-API%20Guide/","title":"REST API Introduction","text":"<p>Includes v11.1 </p> <p>The Xytech platform provides a REST API that makes it possible to create integrations and custom workflows with 3rd party systems.</p> <p>You will need: - Basic authentication credentials - The base URL of the instance you wish to communicate with</p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/","title":"Connecting and Authenticating","text":""},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#licensing","title":"Licensing","text":"<p>The REST API is licensed a component of the Platform\u2019s Application Server. </p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#information-you-will-need","title":"Information You Will Need","text":"<p>To be able to connect with the REST API, you will need to know the instance details:  </p> Detail e.g. Comment Site Base URL https://example.com This is the same base URL you use to access your system Database Name DEMO1 Instance database name"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#api-url","title":"API URL","text":"<p>The API URL is constructed as follows:</p> <p><code>{Site Base URLl}/api/v2/database/{dbname}/{endpoint}</code> </p> <p>e.g. <code>https://example.com/mysite/api/v2/database/demo1/JmJob</code></p> <p>For systems installed prior to mid 2023, you may also require the port number. All later systems are now setup with a proxy to avoid the need to know the port number.</p> <p>If you do not have this information, please contact Xytech Technical Support.</p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#api-users-permissions","title":"API Users &amp; Permissions","text":"<p>An API user needs to have been created as a user in the Platform. The user, must be enabled for REST API access by flagging 'Allow API Login' on the user setup.  As with all users, assign appropriate security roles (enable as a super user is not recommended).</p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#authenticating","title":"Authenticating","text":""},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#oauth-20-openid-authentication-for-rest-api","title":"OAuth 2.0 OpenID Authentication for REST API","text":"<p>Two methods are supported - Client Credentials method (system to system access) - SPA / browser sign-in method (interactive user authentication flow)</p> <p>Pre-requisites Your auth provider has been configured and the Xytech app server has been configured. (Azure and Okta/Auth0)</p> <p>Client-Credentials method, from auth provider you needs: - Access token URL - Client ID - Client Secret - Scope</p> <p>For SPA method you nee: - Authorisation URL - Access token URL - Client ID - Client Secret - Scope</p> <p>Summary flow: Obtain token from auth provider Use token to make REST API calls until token expires.</p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#jwt-token-authentication","title":"JWT Token authentication","text":"<p>For use case scenarios where database user accounts are employed. Typical use might be for system to system authentication requirements.</p> <p>Pre-requisite Xytech app server has been configured for JWT authentication</p> <p>Summary flow: Retrieve token passing login credentials in the POST body Use token for all subsequent API calls, until token expires</p> <p>See additional authentication user guides for more details.</p>"},{"location":"REST-API%20Guide/Connecting%20and%20Authenticating/#basic-authentication","title":"Basic Authentication","text":"<p>The REST API uses Basic Authentication and will require a login account. Always use HTTPS encrypted protocol when communicating with the REST API to ensure credentials are not passed in clear text.</p>"},{"location":"REST-API%20Guide/Custom%20field%20handling/","title":"Custom Field Handling","text":""},{"location":"REST-API%20Guide/Custom%20field%20handling/#custom-fields","title":"Custom Fields","text":"<p>Any custom fields you have defined through document customization are automatically included in REST API definition. There is specific naming convention that is a combination of the Custom Code you created via document customisation plus the internal field name concatenated with an underscore. i.e. {customization code}_{field name}</p> <p>Document customization screen showing the user definable Customization Code </p> <p>Document customization screen showing the internal field names: </p> <p>Response from a GET call to fetch a Work Order that shows custom fields: </p>"},{"location":"REST-API%20Guide/Custom%20field%20handling/#custom-drop-down-fields-with-additional-attributes","title":"Custom drop-down fields with additional attributes","text":"<p>Users can enable custom dropdown fields (through enabling a document customisation flag 'Additional API details', so that when called by the REST API will return the additional attributes stored with the dropdown record such as external_key.</p> <p>Document Customisation fields showing additional checkbox: </p> <p>Example of a custom drop-down field when 'Additional API details' is not enabled: </p> <p>Example of a custom drop-down field when 'Additional API details' is enabled: </p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/","title":"Deprecation of REST API v1","text":"<p>REST API v1 was the first Xytech REST API product. It had limitations that required breaking changes to improve so v2 was made available from Xytech v9.4 with improved functionality.</p> <p>REST API v1 is no longer supported in version 11.0 and beyond.  </p> <p>All new integrations should use API v2 and existing integrations should port to v2 as soon as possible.  </p> <p>To use v2 API, change the base URL version number from ../v1/.. to ../v2/..</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#changes-in-v2-api","title":"Changes in v2 API","text":""},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#payload-structure-changes","title":"Payload structure changes","text":"<p>The payload structure has been enhanced to be more robust and scalable. The primary data object name is now always added as the root element of the payload with an array containing the details.\u00a0 v2 handles sub tables more gracefully and respects the hierarchy of the tables. With v1, the sub tables were often added to the bottom of the payload at the root level, which made it difficult to determine the relationship between tables and their sub items. With v2, the table names are included in the payload and the sub tables are added as children to maintain the relationships.</p> <p>Example showing the root element for JmJob</p> API v1 JSON structure API v2 JSON structure <p>All sub-tables are offset from the root object. See the OpenAPI documentation for details of the JSON structure for each endpoint.</p> <p>In addition, v2 has many enhancements as detailed in this document.</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#migrating-to-api-v2","title":"Migrating to API v2","text":"<p>To assist, below are main steps needed to migrate to API v2: 1. Change your URL to use the v2 path. 2. Adapt to the new and improved payload structure. 3. Utilise new parameters</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#1-change-your-url-to-the-v2-path","title":"1. Change your URL to the v2 path.","text":"<p>API v1 <code>http://domain/api/v1/database/XYT_MAIN_V</code></p> <p>API v2 <code>http://domain/api/v2/database/XYT_MAIN_V</code></p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#2-update-to-handle-the-improved-payload-structure","title":"2. Update to handle the improved payload structure.","text":"<p>The main difference is that v2 handles sub tables more gracefully and respects the hierarchy of the tables especially when making POST calls. See the examples below:</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#get-jm_job-v1","title":"GET Jm_Job v1:","text":"<pre><code>{\n    \"cust_id\": {\n        \"cust_id\": \"4\",\n        \"cust_reference\": \"a\",\n        \"list_id\": \"4\",\n        \"other_cust_id\": \"80000016-1475102220\"\n    },\n    \"customer_name\": \"Xytech Systems (80000016-1475102220)\",\n    \"division_no\": {\n        \"division_code\": \"BUR\",\n        \"division_desc\": \"Burbank\",\n        \"division_no\": 12\n    },\n    \"jm_episode\": [\n        {\n            \"episode_desc\": \"Come, Now is the Time to Worship\",\n            \"episode_number\": \"3\",\n            \"job_no\": 1\n        }\n    ],\n    \"jm_installment\": [\n        {\n            \"installment_desc\": \"First installment\",\n            \"installment_no\": 1486,\n            \"job_no\": 1\n        }\n    ],\n    \"job_no\": {\n        \"external_key\": null,\n        \"job_no\": 1\n    },\n    \"other_cust_id\": \"80000016-1475102220\"\n}\n</code></pre>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#get-jm_job-v2","title":"GET Jm_Job v2:","text":"<pre><code>{\n    \"jm_job\": [\n        {\n            \"job_no\": {\n                \"job_no\": 1\n            },\n            \"division_no\": {\n                \"division_no\": 12\n            },\n            \"cust_id\": {\n                \"cust_id\": \"4\"\n            },\n            \"customer_name\": \"Xytech Systems (80000016-1475102220)\",\n            \"title\": \"Hungary\",\n            \"job_type_no\": {\n                \"job_type_no\": 1158\n            },\n            \"jm_episode\": [\n                {\n                    \"job_no\": 1,\n                    \"episode_det_no\": {\n                        \"episode_det_no\": 1\n                    },\n                    \"episode_number\": \"3\",\n                    \"episode_desc\": \"Come, Now is the Time to Worship\",\n                }\n            ],\n            \"jm_installment\": [\n                {\n                    \"installment_no\": {\n                        \"installment_no\": 1486\n                    },\n                    \"installment_desc\": \"First installment\",\n                    \"term_no\": {\n                        \"term_no\": 33\n                    },\n                    \"invoice_type\": {\n                        \"invoice_type\": 1\n                    },\n                },\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#post-xmtransmissionorder-v1","title":"POST XmTransmissionOrder v1:","text":"<pre><code>{\n    \"wo_desc\": \" AS XM Test 7\",\n    \"wo_begin_dt\": \"2024-09-07T00:00:00-07:00\",\n    \"wo_end_dt\": \"2024-09-07T00:00:00-07:00\",\n    \"wo_type_no\": {\n        \"wo_type_no\": 3301\n    },\n    \"phase_code\": {\n        \"phase_code\": \"Conf\"\n    },\n    \"cust_id\": {\n        \"list_id\": \"403\"\n    },\n    \"xm_mode_type\": \"O\",\n    \"xm_mode_no\": {\n        \"xm_mode_no\": 12\n    }\n}\n</code></pre>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#post-xmtransmissionorder-v2","title":"POST XmTransmissionOrder v2:","text":"<pre><code>{\n    \"jm_work_order\": [\n        {\n            \"wo_desc\": \" AS XM Test 7\",\n            \"wo_begin_dt\": \"2024-09-07T00:00:00-07:00\",\n            \"wo_end_dt\": \"2024-09-07T00:00:00-07:00\",\n            \"wo_type_no\": {\n                \"wo_type_no\": 3301\n            },\n            \"phase_code\": {\n                \"phase_code\": \"Conf\"\n            },\n            \"cust_id\": {\n                \"list_id\": \"403\"\n            },\n            \"xm_mode_type\": \"O\",\n            \"xm_mode_no\": {\n                \"xm_mode_no\": 12\n            },\n            \"mo_service_row\": [\n                {\n                    \"service_row_no\": {\n                        \"service_row_no\": -1\n                    },\n                    \"service_header\": \"Y\",\n                    \"service_no\": {\n                        \"service_no\": 482\n                    },\n                    \"service_profile_no\": {\n                        \"service_profile_no\": 1264\n                    },\n                    \"service_status_no\": {\n                        \"service_status_no\": 3,\n                        \"service_status_code\": \"RDY\"\n                    },\n                    \"service_profile_desc\": \"Media Broadcast BNS\"\n                },\n                {\n                    \"service_row_no\": {\n                        \"service_row_no\": -2\n                    },\n                    \"service_header\": \"N\",\n                    \"service_no\": {\n                        \"service_no\": 482\n                    },\n                    \"service_profile_no\": {\n                        \"service_profile_no\": 1264\n                    },\n                    \"service_status_no\": {\n                        \"service_status_no\": 3,\n                        \"service_status_code\": \"RDY\"\n                    },\n                    \"parent_service_row_no\": -1,\n                    \"service_profile_desc\": \"Media Broadcast BNS\",\n                    \"mo_operation\": [\n                        {\n                            \"operation_no\": {\n                                \"operation_no\": -1\n                            },\n                            \"task_no\": {\n                                \"task_no\": 200,\n                                \"task_code\": \"ALW\"\n                            },\n                            \"service_row_no\": -1,\n                            \"status_no\": 2,\n                            \"task_code\": \"ALW\",\n                            \"trx_group_code\": {\n                                \"group_code\": \"0004S\",\n                                \"trx_group_code\": \"0004S\"\n                            },\n                            \"trx_resource_code\": {\n                                \"resource_code\": \"FCR10\",\n                                \"trx_resource_code\": \"FCR10\"\n                            },\n                            \"trx_phase_code\": {\n                                \"phase_code\": \"Conf\",\n                                \"trx_phase_code\": \"Conf\"\n                            },\n                            \"trx_sched_qty\": 1,\n                            \"lock_billing_unit\": \"N\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#3-utilise-new-parameters","title":"3. Utilise new parameters","text":"<p>To improve responsiveness and design efficient integrations. The following additional URL parameters were added for GET requests:</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#nullvaluehandlingignore","title":"NullValueHandling=ignore","text":"<p>This parameter removes all the fields with null values from the result set.</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#alternatekeyhandlingignore","title":"AlternateKeyHandling=ignore","text":"<p>This parameter instructs the API to not resolve the alternate keys in the payload for GET requests. The highlighted items are removed from the result set: </p> <p>Best practice:</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#resultcolumns","title":"ResultColumns","text":"<p>Always filter a GET call using resultColumns parameter so that you only return the fields you need.</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#4-use-put-requests-for-upserts-create-or-update","title":"4. Use PUT requests for upserts (create or update)","text":"<p>Avoids making additional calls to check whether a record already exists before creating/updating it.</p>"},{"location":"REST-API%20Guide/Deprecation%20of%20REST%20API%20v1/#5-utilise-the-new-response-payload-with-ids-of-created-records","title":"5. Utilise the new response payload with IDs of created records","text":"<p>POST XmTransmissionOrder response payload with record IDs </p><pre><code>{\n    \"message\": null,\n    \"tables\": [\n        \"jm_work_order\",\n        \"mo_service_row\",\n        \"mo_operation\"\n    ],\n    \"jm_work_order\": {\n        \"record_identifiers\": [\n            \"wo_no_seq\"\n        ],\n        \"records\": [\n            {\n                \"wo_no_seq\": \"1067998-1\"\n            }\n        ]\n    },\n    \"mo_service_row\": {\n        \"record_identifiers\": [\n            \"service_row_no\"\n        ],\n        \"records\": [\n            {\n                \"service_row_no\": 217413\n            },\n            {\n                \"service_row_no\": 217414\n            }\n        ]\n    },\n    \"mo_operation\": {\n        \"record_identifiers\": [\n            \"operation_no\"\n        ],\n        \"records\": [\n            {\n                \"operation_no\": 128370\n            },\n            {\n                \"operation_no\": 128371\n            }\n        ]\n    }\n}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Examples/","title":"Examples","text":"<p>Some basic examples of API calls</p>"},{"location":"REST-API%20Guide/Examples/#get","title":"GET","text":"<p>Retrieve Work Order header details returning specific fields and not null values: </p><pre><code>curl --location --globoff 'http://{APIbaseURL}/JmWorkOrder/wo_no_seq=2627-1?resultColumns={\"jm_work_order\":[\"wo_no_seq\",\"wo_desc\",\"wo_begin_dt\",\"wo_end_dt\",\"phase_desc\",\"sched_by_name\"]}&amp;nullvaluehandling=ignore' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic *************' \\\n--data '@'\n</code></pre><p></p> <p>Response: </p><pre><code>{\n    \"jm_work_order\": [\n        {\n            \"wo_no_seq\": {\n                \"wo_no_seq\": \"2627-1\"\n            },\n            \"wo_desc\": \"Dscription2\",\n            \"wo_begin_dt\": \"2000-03-31T02:30:00-08:00\",\n            \"wo_end_dt\": \"2000-03-31T05:30:00-08:00\",\n            \"wo_type_no\": {\n                \"wo_type_no\": 3275,\n                \"wo_type_desc\": \"Production\"\n            }\n        }\n    ]\n}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Examples/#post-method","title":"POST method","text":"<p>Create a new Work Order with minimal fields: </p><pre><code>curl --location 'http://{APIbaseURL}/JmWorkOrder' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic ********' \\\n--data '{\n    \"jm_work_order\": [\n        {\n            \"wo_desc\": \"Match20\",\n            \"wo_begin_dt\": \"2023-08-22T10:00:00.000Z\",\n            \"wo_end_dt\": \"2023-08-22T16:00:00.000Z\",\n            \"wo_type_no\": 17,\n            \"phase_code\": \"Bid\",\n            \"rate_card_no\": 1,\n            \"cust_id\": 19\n        }\n    ]\n}'\n</code></pre><p></p> <p>Response: </p><pre><code>{\n    \"message\": null,\n    \"tables\": [\n        \"jm_work_order\"\n    ],\n    \"jm_work_order\": {\n        \"record_identifiers\": [\n            \"wo_no_seq\"\n        ],\n        \"records\": [\n            {\n                \"wo_no_seq\": \"8250-1\"\n            }\n        ]\n    }\n}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Examples/#patch","title":"PATCH","text":"<pre><code>curl --location --request PATCH 'http://{APIbaseURL}/JmJob/job_no=67981' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic eHl0ZWNoOnh5dGVjaHB3' \\\n--data '[\n    {\n        \"op\": \"replace\",\n        \"path\": \"job_desc\",\n        \"value\": \"Hello World\"\n    },\n    {\n        \"op\": \"replace\",\n        \"path\": \"external_key\",\n        \"value\": 15411\n    }\n]'\n</code></pre> <p>Response: Status Code 204</p>"},{"location":"REST-API%20Guide/Examples/#patch-using-post-payload","title":"PATCH Using POST Payload","text":"<p>There are two PATCH methods, one where you define the field and the operation, the other is to use the full POST JSON payload. To use the PATCH with the full JSON payload, you must include the header parameter: 'Content-Type: application/json-patch+json'</p> <p>Example Work Order update using PATCH and the POST payload structure: </p><pre><code>curl --location --request PATCH 'http://{APIbaseURL}/JmWorkOrder/wo_no_seq=8248-1' \\\n--header 'Content-Type: application/json-patch+json' \\\n--header 'Authorization: Basic **********' \\\n--data '{\n    \"jm_work_order\": [\n        {\n            \"wo_no_seq\": {\n                \"wo_no_seq\": \"8248-1\"\n            },\n            \"wo_desc\": \"My New Description\",\n            \"po\": \"123456\",\n            \"phase_code\": \"Hold\"\n        }\n    ]\n}'\n</code></pre> Response 200 status code <pre><code>{\n    \"message\": null,\n    \"tables\": []\n}\n</code></pre><p></p> <p>Notes: The payload must include the existing primary key as a URL parameter as well as in the body payload. The expected response status code for a successful PATCH can be 200 or \u2018204\u2019 where no response is returned.</p>"},{"location":"REST-API%20Guide/Examples/#patch-using-list-endpoints","title":"PATCH using List endpoints","text":"<p>List endpoints also support the PATCH method so that you can update multiple records using a query (see \u2018Parameters\u2019 section above for details on available query parameters). This method is the equilivent API functionality of the Grid Update feature in the UI.  </p> <p>Example to update multiple Work Orders using the $range query parameter:</p> <p></p><pre><code>curl --location --globoff --request PATCH 'http://{APIbaseURL}/JmWorkOrderList?Query={\"date_added\":{\"$range\":[\"2022-07-26T00:00:00\",\"2023-07-28T00:00:00\"]},\"wo_type_no\": 40}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data '[\n\u00a0 {\n\u00a0 \u00a0 \"op\": \"replace\",\n\u00a0 \u00a0 \"path\": \"wo_reference\",\n\u00a0 \u00a0 \"value\": \"Quick Service 2\"\n\u00a0 }\n]'\n</code></pre> Response Status Code 204.<p></p> <p>As\u00a0with\u00a0GET,\u00a0wildcards\u00a0\u2018%\u2019\u00a0are\u00a0supported\u00a0such\u00a0as: PATCH {base_url}__/\u00a0JmJobList?Query={\"job_desc\":\u00a0\"Sport%\"}</p> <p>See many other basic payload examples in the public Postman Collection.</p>"},{"location":"REST-API%20Guide/Fundamentals%20and%20data%20model/","title":"Fundamentals and data model","text":"<p>The Platform is, at a fundamental level, a system that deals with creating, updating, and utilizing a particular type of data object referred to as a document.</p> <ul> <li>Each Platform document is a representation of a database table or collection of database tables and has an API endpoint.<ul> <li>Each endpoint has a primary table and may have one or more sub-tables.</li> <li>All sub-tables are children of the primary table, and a sub-table can have one or more child sub-tables.</li> </ul> </li> <li>Each endpoint represents one of the following types of document:<ul> <li>Setup - generally describes a single item, and usually only contains a primary table. Setup documents are often used to manage simple items used to generate lists of options in other documents, such as status labels or predefined sets of codes.</li> <li>Maintenance \u2013 generally describes either master data (which are used in transactional data) or transactional data. Maintenance documents often contain one or more sub-tables.</li> <li>List documents provide access to sets of other records, such as Setup and Maintenance documents.</li> </ul> </li> </ul> <p>The Platform REST API is JSON-based and has Open API v3.0 API specifications for each API call available in YAML (migrating to JSON from v11.1). These specifications can be retrieved as a plain YAML file and are also readily available to be viewed in a browser through the Swagger UI. See the OpenAPI definition</p>"},{"location":"REST-API%20Guide/Fundamentals%20and%20data%20model/#high-level-data-model-diagram","title":"High level data model diagram","text":"<p>This diagram provides you with a high-level understanding of the primary Xytech Platform data objects and how they relate.</p> <p>Below the name of each data object is the REST API endpoint used for accessing the data object. Where ~/ is prefixed before the endpoint, that indicates it is a sub-table endpoint of the primary endpoint. See the OpenAPI definition for full details.</p> <p></p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/","title":"Key Fields and Time Formats","text":"<p>Each payload contains a nested sub-section of key fields which are used for the lookup of records by a key field. This sub-subsection is identified by the primary key field name. </p> <p>The nested sub-section of fields are not used for writing values to the database, values that need to be stored should be contained in the main root of the payload.</p> <p>The sub-group always contains the primary key field and the 'external_key' field.</p> <p>Additionally, there are sub-sections of related tables with their key fields. Lookups (using GET query parameters) can only filter sub-tables using the sub-table primary key and not their alternate keys, unless sub-table fields exist in the main body of the payload.</p> <p>As a general rule, if you are creating or updating file values, the fields you need to write values to should be included in the root of the payload</p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#creating-records-with-key-fields","title":"Creating Records with key fields","text":"<p>Using POST, you have two options for creating and setting key values of sub-tables. Below is an example to create a JmJob that generates the primary key value (using -1) and assigns the Division, Customer and Job Type sub-table IDs. This structure follows the same structure you will receive from a GET call. </p><pre><code>{\n    \"jm_job\": [\n        {\n            \"job_no\": {\n                \"job_no\": -1\n            },\n            \"division_no\": {\n                \"division_no\": 2\n            },\n            \"cust_id\": {\n                \"cust_id\": 409\n            },\n            \"job_desc\": \"Passing Fancy\",\n            \"external_key\": \"1234\",\n            \"po\": \"PO002\",\n            \"job_type_no\": {\n                \"job_type_no\": 1113\n            }\n        }\n    ]\n}\n</code></pre><p></p> <p>Alternatively you can flatten the structure to populate the primary key values. This is where the field name is the same as the sub-section name. </p><pre><code>{\n    \"jm_job\": [\n        {\n            \"job_no\": -1,\n            \"division_no\": 2,\n            \"cust_id\": \"409\",\n            \"job_desc\": \"Passing Fancy\",\n            \"external_key\": \"1234\",\n            \"po\": \"PO002\",\n            \"job_type_no\": 1113\n        }\n    ]\n}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#creating-records-with-alternate-keys","title":"Creating records with alternate keys","text":"<p>When using POST to create new records, values for any alternate key fields, such as external_key, must be contained in the main body of the payload and not included in the sub-section of key fields (where they will be ignored). The same applies to PATCH method that uses the header <code>application/json-patch+json</code>  See examples above where external_key is included in the POST payload. Or this example for creating a resource with an external key value: </p><pre><code>{\n    \"sch_resource\": [\n        {\n            \"resource_code\": {\n                \"resource_code\": \"FRED01\"\n            },\n            \"resource_desc\": \"Fred\",\n            \"external_key\": \"Ext001\"\n        }\n    ]\n}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#external-key","title":"External Key","text":"<p>External key fields exist on all documents and is designed to be used to store the external system's unique identifier for a record. The external key field can then be used in future look-ups as opposed to having to know the Xytech primary key field value.</p> <p>Example below shows a GET response section of the Job's (jm_job) key fields in the sub-group \"job_no\": </p><pre><code>{\n    \"jm_job\": [\n        {\n            \"job_no\": {\n                \"job_no\": 342,\n                \"external_key\": \"154110\"\n            },\n            \"division_no\": {\n                \"division_no\": 2,\n                \"division_desc\": \"Burbank \",\n                \"division_code\": \"BRB\",\n                \"external_key\": null\n            },\n            \"cust_id\": {\n                \"list_id\": \"409\",\n                \"other_cust_id\": null,\n                \"cust_reference\": null,\n                \"external_key\": null,\n                \"cust_id\": \"409\"\n            },\n            \"other_cust_id\": null,\n            \"external_key\": \"154110\",\n            \"customer_name\": \"Tupper Lake Films\",\n            ...\n</code></pre><p></p> <p>Some documents may have additional key fields which will all be contained within the same sub-group, such as Media Assets (known by the document name lib_master). All these key fields within \"master_no\" sub section can be used to retrieve the record with a GET call.</p> <pre><code>{\n    \"lib_master\": [\n        {\n            \"master_no\": {\n                \"master_no\": 18,\n                \"barcode\": \"2000XYT\",\n                \"external_key\": null,\n                \"umid\": null\n            },\n            \"cust_id\": {\n                \"list_id\": \"32\",\n                \"other_cust_id\": null,\n                \"cust_reference\": null,\n                \"external_key\": null,\n                \"cust_id\": \"32\"\n            },\n            \"customer_name\": \"Alchemy Films\",\n            \"master_desc\": \"International Master  \n            ...\n</code></pre> <p>GET call example to retrieve the above record using barcode: </p><pre><code>{{server}}/LibMaster/barcode=2000XYT\n</code></pre><p></p> <p>NOTE: You will need to ensure uniqueness is maintained across alternate keys if you want to be able to retrieve individual records like the above example.</p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#generating-the-primary-key","title":"Generating the primary key","text":"<p>When creating records using the POST method, to generate the primary key, set the value to -1. When creating multiple sub-table records in a single call that need their own next value generated, advance the value by one for each separate sub-table key field needed, E.g -1, -2, -3 etc\u2026 If you use -1 again, it will use the same value as the first instance. This can be useful in calls that require the same ID value to be populated again elsewhere in the payload.</p> <p>There is one exception to this which is JmWorkOrder, where the primary key is a combination of wo_no + wo_seq. To generate wo_no_seq requires a \"+1\" value. Example: </p><pre><code>{\n    \"jm_work_order\": [\n        {\n            \"wo_no_seq\": \"+1\",\n            \"wo_desc\": \"Match20\",\n            \"wo_begin_dt\": \"2023-08-22T10:00:00.000Z\",\n            \"wo_end_dt\": \"2023-08-22T16:00:00.000Z\",\n            \"wo_type_no\": 17,\n            \"phase_code\": \"Bid\",\n            \"rate_card_no\": 1,\n            \"cust_id\": 19\n        }\n    ]\n}\n</code></pre><p></p> <p>Be aware some fields are mandatory, and are defined in the OpenAPI definition.</p> <p>The id of the created record is returned in the response payload.</p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#time-formats","title":"Time formats","text":"<p>Date time formats used by the REST API follow ISO-8601 standards. <code>YYYY-MM-DDThh:mm:ss.sTZD</code></p> <p>Times are stored in the Xytech database as UTC times  (the exception being when the Master Time Zone is not set to UTC, which is a legacy option)</p> <p>The recommendation is to work in UTC times or local times using the Time Zone Header attribute.</p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#post-put-and-patch-examples","title":"POST, PUT and PATCH Examples","text":"<p>UTC time format: 2025-02-20T10:00:00.000Z 2025-02-20T10:00:00Z</p> <p>Or Using time zone offset: 2025-02-16T04:00:00-05:00</p> <p>Or use the header 'Source-Time-Zone-Name' to define the time zone. e.g.  header: <code>Source-Time-Zone-Name: Pacific Standard Time</code> </p> <p>Use this if you want to supply API payload times in local times, any DST offsets will be auto calculated when the system stores the UTC time into the database.</p> <p>This will override any time zone offset supplied.</p>"},{"location":"REST-API%20Guide/Key%20fields%20and%20time%20formats/#get-and-response-payloads","title":"GET and response payloads","text":"<p>Will respond with the offset attribute. 2025-02-20T10:00:00+00:00</p> <p>(Note any offset is determined by the app server time zone , normally set to UTC, the time plus offset will equate to the UTC time)</p>"},{"location":"REST-API%20Guide/Known%20Issues/","title":"Known Issues","text":""},{"location":"REST-API%20Guide/Known%20Issues/#post-get-payload-differences","title":"POST &amp; GET payload differences","text":"<p>There are differences in the payload structure between POST &amp; GET calls when filtering by sub-table. When using GET to fetch a payload filtered by a sub-table, the payload is missing the sub-table wrapper. The Swagger definition reports the correct payload structure that includes the sub-table wrapper, but that is not what works today. A fix would mean a breaking change, so we shall not be correcting this until API v3.</p> <p>Example of how Swagger defines the GET response payload for a sub-table of /XmTransmissionOrder endpoint, which includes the wrapper in this case mo_service_row.</p> <pre><code>{\n  \"mo_service_row\": [\n    {\n      \"service_header\": \"string\",\n      \"service_desc\": \"string\",\n      \"service_row_no\": {\n        \"service_row_no\": 0,\n        \"external_key\": \"string\"\n      },\n      \"dsp_seq\": 0,\n      ...\n</code></pre> <p>Below is how the the endpoint actually responds that excludes the wrapper.</p> <pre><code>[\n    {\n      \"service_header\": \"Y\",\n      \"service_desc\": \"AUTO ROUTE\",\n      \"service_row_no\": {\n        \"service_row_no\": 7428,\n        \"external_key\": null\n      },\n      \"dsp_seq\": 1,\n      ...\n</code></pre>"},{"location":"REST-API%20Guide/Known%20Issues/#sub-table-record-creation-respond-with-invalid-ids","title":"Sub-table record creation respond with invalid IDs","text":"<p>When using a POST call that includes creating sub-table records, some endpoints respond with invalid sub-table record IDs that are negative values. This will be resolved in v11.1</p>"},{"location":"REST-API%20Guide/Known%20Issues/#field-order-of-some-endpoints-has-to-be-maintained","title":"Field order of some endpoints has to be maintained","text":"<p>There is an issue with a few endpoints when sending a JSON payload. The order the fields  submitted within the payload can cause an error response when placed in an in an order the endpoint does not expect. Field order should not be a necessity, but to improve this, requires substantial changes to the API that can only be considered for the future API v3.  </p>"},{"location":"REST-API%20Guide/Known%20Issues/#release-v106-date-time-format","title":"Release v10.6 Date Time format","text":"<p>Temporally in release v10.6, the format of date time values where all expressed in UTC format instead of with the time offset.</p> <p>Should look like this:</p> <p></p><pre><code>\"2023-04-21T01:00:00+01:00\"\n</code></pre> For v10.6 the format looked like this:<p></p> <pre><code>\"2023-04-21T00:00:00Z\"\n</code></pre> <p>This has been corrected from v11.0 onwards.</p>"},{"location":"REST-API%20Guide/Known%20Issues/#release-v112-date-time-offset-ignored-for-post","title":"Release v11.2 Date Time offset ignored for POST","text":"<p>An issue existed in v11.2 where any offset value included with the date time when using POST would be ignored. This has been resolved in v11.3</p>"},{"location":"REST-API%20Guide/Methods%20and%20response%20codes/","title":"Methods and Response Codes","text":"<p>RESTful services utilize HTTP methods to differentiate between different types of API calls.</p>"},{"location":"REST-API%20Guide/Methods%20and%20response%20codes/#methods","title":"Methods","text":"Verb Used for GET - Retrieving a list of all records of a certain document type that match specified criteria, such as all Bids that start in the current year, all Jobs associated with a specific Client, or all Contacts whose names begin with the letter A, or- Retrieving a specific record of a certain document type, such as all the properties of a Job with a specific Job ID. POST POST commands are usually used to create new records, such as adding a new resource or creating a new Job PATCH Updates an existing record with a specified value(s) using partial informationTwo forms of PATCH are supported:- Specific field replace/delete value (Content-Type : application-json)- Replace using a full JSON payload (Content-Type : application-patch+json) - see note below PUT Upserts a record (Create or update if already exists using external_key as the identifyer) DELETE Delete commands are usually used to permanently remove existing records from the host system.\u00a0  Note: DELETE commands should be used sparingly; to both preserve data integrity and provide historical information, it is usually recommended to change the Status of a record instead of deleting the record completely. Note: PATCH using 'Content-Type : application-patch+json' cannot be used when calling sub-tables ## Response Codes <p>The REST service generates HTTP response codes. In many cases, the HTTP response code will be accompanied by additional information in the body or the header of the message. In some cases, the HTTP response code may be the only response.</p> Response Code Description 2xx Range Success Codes 200 Ok The call was successful. In most cases, there will be additional information returned by the API in the body of the message, such as the matching record(s) for a query, or the ID of a record created, modified, or deleted by a corresponding API call. 201 Created The request has been fulfilled, resulting in the creation of a new resource. 204 No Content The server has fulfilled the request but does not need to return a response body. The server may return the updated meta information. 4xx Range Client Error 400 Bad Request The call was not successful due to an error in the URL or the syntax of the API call. Check the syntax of the API call to make sure there are no invalid characters. 401 Unauthorized The call was not successful because the API requires a validcredentials, and they were not provided as part of the call.Response Code Description Verify that the call is providing login information in an acceptable manner. 404 Not Found The call was not successful because the service could not find the requested API. Check the URL for any mismatches between the API call being sent and the documented API signature. 5xx Range Server Error 500 Internal Server Error The call was not successful because it caused an error in the service during processing, such as providing an incorrect data type for a given property/field. Verify that all parameters are correct, and values are valid. 502 Bad Gateway The call was not successful because the service got an invalid response from the API. Verify that all parameters are correct, and values are valid. <p>For more information refer to the appropriate section of the HTTP protocol or a developer resource for HTTP status codes, such as the MDN Web Docs.</p>"},{"location":"REST-API%20Guide/OpenAPI%20definition/","title":"OpenAPI Definition and Endpoints","text":""},{"location":"REST-API%20Guide/OpenAPI%20definition/#summary-index","title":"Summary Index","text":"<p>From Platform version v10.2, an OpenAPI (previously referred to as Swagger) index page has been introduced to assist in the navigation and generation of OpenAPI definitions. The index page can be found by entering the base URL of your site (you use for accessing the Platform UI) and adding \u201c/ApiDocs\u201d to the end (e.g. <code>www.xytechexample.com/XYT\\_TEST/ApiDocs</code>). The Xytech API Index page is displayed.\u00a0</p> <p>API Index Page </p>"},{"location":"REST-API%20Guide/OpenAPI%20definition/#using-the-index","title":"Using the Index","text":"<p>The index page displays groups of endpoints called modules for the selected database. Clicking on a module will reveal the endpoints within that module. Click on an endpoint, and the OpenAPI definition will be generated using the Swagger UI.</p> <p>The Index is comprised of the following areas: -   Selected Database: The name of the database currently selected for this host.  -   Available Databases: (Where multiple databases exist on the same host) Click a database to select it and view its associated endpoint modules. -   Filter Documents: Enter text into this field and press [Enter] to display matching endpoint descriptions. -   Module and Document List: Only modules in the selected database are displayed. Click any Module to expand and show the endpoints it contains. Each endpoint has a label that describes its type (Document [maintenance], List, or Setup).</p> <p>Demo OpenAPI definitions</p> <p>See a demo of Xytech OpenAPI definitions here</p>"},{"location":"REST-API%20Guide/OpenAPI%20definition/#mandatory-fields-note","title":"Mandatory Fields Note","text":"<p>The OpenAPI definition model identifies many fields as mandatory (nullable: false), which indicates that a value must be provided when the item is written to the database. However, in some cases, the business logic will provide default values, so it may not be strictly necessary to pass values for all mandatory fields to the API to create a new record.\u00a0 For example, in a basic payload to create a Work Order, OpenAPI identifies at least 25 fields as mandatory, but the most basic payload to create a Work Order requires 7.</p>"},{"location":"REST-API%20Guide/OpenAPI%20definition/#for-versions-prior-to-v102","title":"For versions prior to v10.2","text":"<p>For versions prior to v10.2 you will need to generate the OpenAPI documentation manually for each document endpoint. Use a browser to generate the OpenAPI document: <code>http://{host}:{port}/API/v2/database/{db_name}/spec/{docName}</code></p> <p>For example: <code>http://myhost:8088/API/v2/database/mp10/spec/JmJob</code></p> <p>The above URL will generate the OpenAPI document and then display the OpenAPI document. To display generated OpenAPI documents, browse to: <code>http://{host}:{port}/REST/SwaggerUI/dist/index.html?document={docName}_v2</code></p> <p>For example: <code>http://myhost:8088/REST/SwaggerUI/dist/index.html?document=JmDivision_v2</code></p>"},{"location":"REST-API%20Guide/OpenAPI%20definition/#endpoint-list","title":"Endpoint List","text":"<p>There are over 1000 individual documents (endpoints) available to the Platform\u2019s REST API. Below is a small sample of those documents. The full list of available documents can be obtained directly from the Platform UI using the Document Customizations list found under the System module. Specific details on each document can be found via the OpenAPI definition </p> ID\u00a0Class Name\u00a0Document Description\u00a0Document Type10315\u00a0JmJob\u00a0Job\u00a0Maintenance315\u00a0JmJobList\u00a0Jobs\u00a0Select (List)10317\u00a0JmJobStatus\u00a0Job Statuses\u00a0Setup10318\u00a0JmJobTable1\u00a0Subscription\u00a0Setup10322\u00a0JmJobType\u00a0Job Types\u00a0Setup359\u00a0JmTrxReport\u00a0Transaction Reports\u00a0Select (List)10339\u00a0JmWorkOrderWork Order\u00a0Maintenance10346\u00a0JmWoTransaction\u00a0Work Order Transactions\u00a0Maintenance"},{"location":"REST-API%20Guide/Performance%20Recommendations/","title":"Performance Recommendations","text":"<p>To avoid impacting user experience or other integrations, it is important to utilise the APIs efficiently:</p> <ol> <li>Only fetch the fields you need - use the resultColumns parameter</li> <li>Suppress null value fields - use the nullvaluehandling parameter</li> <li>Disable alternate key handling - use the alternatekeyhandling parameter</li> <li>Make use of Webhooks not polling - see the Webhooks guide.</li> <li>Ensure the use of compression - include header <code>Accept-Encoding:\u00a0\u00a0gzip\u00a0or deflate</code></li> <li>Always use pagination.</li> </ol>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/","title":"Working with Query Parameters and Filters","text":""},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#query-parameter","title":"Query Parameter","text":"<p>GET and PATCH List endpoints require query parameters.</p> <p>This section describes the syntax and options used for the query parameter. This is a mandatory parameter for List documents.</p> <p>The standard format for a \u201cquery\u201d parameter is to add the parameter as query={} to the end of a GET request for a List document after the parameter delimiter (\u201c?\u201d), where the value of query= is a JSON object:</p> <p><code>http://{APIbase_url}/documentList?query={key: value}</code></p> <p>Such as:</p> <p><code>http://{APIbase_url}/jmJobList?query={\"job_no\": \"12345\"}</code></p> <p>Note: The query parameter is supported with GET and PATCH requests of List type documents and is not supported by GET requests for Setup or Maintenance documents.</p> <p>In the simplest form, the value is a single piece of information, such as a string or integer. In more complex forms, the value is a JSON object containing specific formats as described below.</p> <p>See section regarding URL encoding requirements: URL encoding of special characters</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#query-filters","title":"Query Filters","text":""},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#string-or-number","title":"String or Number","text":"<p>To return items that match a specified string. The string can either be letters or numbers. Wildcard \u2018%\u2019 can be used. Remember to URL encode the % sign. </p> Description Parameter values Syntax query= {\"field\":\"value\"} Examples query={\"job_desc\":\"Big Apple Live\"}  query={\"job_desc\":\"%Big%\"}  query={\"job_no\":101101}| Multiple key/value pairs To specify multiple key/value pairs, separate each key/value pair with a comma  query={\"cust_id\":\"123\",\"job_type_no\":\"4\"}  query={\"cust_id\":\"123\",\"job_type_no\":\"4\",\"active\":\"Y\"} Note: When specifying multiple key/value pairs, the API will return only items that match ALL specified criteria."},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#range","title":"Range","text":"<p>To return items that fall between a specified minimum and maximum numeric value.</p> Description Parameter values Syntax <code>&lt;br&gt;query=\"field\":{\"$range\":[lower_limit, upper_limit]}&lt;br&gt;</code> Examples <code>&lt;br&gt;query={\"job_no\":{\"$range\":[100, 199]}}&lt;br&gt;query={\"wo_begin_dt\":{\"$range\":[\"2023-12-01\",\"2023-12-31\"]}}  &lt;br&gt;query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00\",\"2023-06-01T17:00\"]}}&lt;br&gt;</code>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#in","title":"In","text":"<p>To return items that match one of the values provided in a given set of values. See section below on wildcards Searching for multiple wildcard values</p> Description Parameter values Syntax <code>query={\u201cfield\u201d:{\"$in\":[\u201cvalue_1\u201d,\u201dvalue_2\u201d, \u2026 \u201dvalue_n\u201d]}}</code> Examples <code>query={\u201cjob_no\u201d:{\"$in\":[100, 105, 110, 119]}}</code>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#null-empty","title":"Null (empty)","text":"<p>To return items that have NULL values.  Note: Put pipe characters around NULL to differentiate it from the literal string \u201cNULL\u201d.</p> Description Parameter Values Syntax query={\"field\u201d: \u201c|NULL|\u201d} Examples query={\u201cphone_number\u201d:\"|NULL|\"}"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#ne-not-equal","title":"NE (not equal)","text":"<p>To return items that do not match the specified number, string, or NULL.</p> Description Parameter Values Syntax query={\u201cfield\u201d:{\"$ne\":\u201dvalue\u201d}} Examples: Not string query={\"job_desc \":{\"$ne\":\"Big Apple Live\"}} Not number query={\"cust_id\":{\"$ne\":1001}} Not null query={\"jm_phase_external_key\":{\"$ne\":\"|NULL|\"}} Not like query={\"wo_desc\":{\"$ne\":\"Test%\"},\"wo_type_no\": 83}"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#greater-than-and-less-than-new-query-parameters","title":"Greater than and less than new query parameters","text":"<p>To return items where values are greater than or less than a given value.</p> Description Abv Parameter values Syntax query={\"field\":{\"option\": \"value\"}} Examples: Greater Than $gt query={\"title_no\":{\"$gt\": 106438}} Greater Than Or Equal $gte query={\"date_added\":{\"$gte\":\"2022-07-26T00:00:00\"}} Less Than $lt query={\"date_added\":{\"$lt\":\"2022-07-26T00:00:00\"}} Less Than Or Equal $lte query={\"date_added\":{\"$lte\":\"2022-07-26T00:00:00\"}} Values can be numeric or dates. <p>Full GET example for greater than </p><pre><code>curl --location --globoff 'http://{APIbaseURL}/LibMasterList?resultcolumns={\"L\": [\"master_no\", \"master_desc\", \"date_added\",\"desc_3\"]}&amp;query={\"title_no\":{\"$gt\": 1102}}' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic ******' \\\n--data ''\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#notin-not-in","title":"NOTIN (Not in)","text":"<p>(11.1) Ability to query where a field's value does not match an array of supplied values. Usage example: {{server}}/PmProjectList?query={\"project_desc\":{\"$notin\":[\"test\", \"Sarah\"]}} Applies to GET queries.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#likeand-like-and","title":"LIKEAND (Like and)","text":"<p>(11.1) Ability to define an array of matching values that all have to match regardless of the order defined.  {{server}}/LibMasterList?{\"master_desc\":{\"$LIKEAND\":[\"%Genesis%\",\"%XHD%\"]} Applies to GET queries.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#query-filter-tips","title":"Query Filter Tips","text":""},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#null-values","title":"NULL Values","text":"<p>The Null parameter returns any record that has a null value for the specified key, which indicates that no value has ever been set. This differentiates it from an empty string for text-based or date-based properties, a 0 value for numbers, and true or false values for Boolean properties.</p> <p>Note: Not all fields support null values. If possible, check the OpenAPI definition whether the field allows nulls.</p> <p>Values - String values are not case-sensitive. - DateTime values should be provided in a valid ISO date format.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#url-encoding-of-special-characters","title":"URL encoding of special characters","text":"<p>When using HTML special characters as part of the query value, they must be URL encoded.</p> <p>Example:\u00a0\u00a0to use a wildcard query such as \"%dave%\", the % needs substituting with %25. \u00a0Once URL encoded will look like this %25dave%25</p> <p>Example GET query with URL encoded wildcard :</p> <p>{{server}}/MoMediaOrderList?query={\"wo_desc\":\"%25dave%25\"}&amp;resultcolumns={\"L\": [\"wo_no\", \"wo_desc\"]}</p> <p>(Specifically the reason why\u00a0%dave% fails to return valid results it that %da\u00a0is the encoding for the\u00a0\u00da character)</p> <p>This also applies to datetime values that use the offset attribute with the + sign.</p> <p>To include a value of \"2023-06-01T09:00+5:00\" in a URL query parameter, substitute + with %2b</p> <p>Example:  <code>query={\"wo_begin_dt\":{\"$range\":[\"2023-06-01T09:00%2b5:00\",\"2023-06-01T17:00%2b5:00\"]}}</code></p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#searching-for-multiple-wildcard-values","title":"Searching for multiple wildcard values","text":"<p>If you wanted to search for multiple wildcard values contained within a single field that all need to exist, then you can include a list of wildcard values.</p> <p>For example, if you wanted to search for media assets that have \"Tale\" AND \"Dark\" in their \"master_desc\" field, you can use the following query parameter:</p> <p><code>{\"master_desc\":{$in:[\"%Tale%Dark%\",\"%Tale%Dark%\"]}}</code></p> <p>Note you may need to use encode the % symbol (for instance if using Postman) you will need:</p> <p><code>{\"master_desc\":{$in:[\"%25Tale%25Dark%25\",\"%25Tale%25Dark%25\"]}}</code></p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#result-columns-parameter","title":"Result Columns Parameter","text":"<p>Used by the GET method on List and Maintenance endpoints.</p> <p>resultColumns parameter is used to define the fields you wish to return in the response. Without this parameter, the response will contain all document fields which is not recommended for performance reasons.</p> <p>For example: <code>{APIbaseurl}/JmJobList?Query={\"job_no\":2}&amp;resultColumns={\"L\":[\"job_no\",\"job_desc\"]}</code></p> <p>Job No. and Job Description fields will be included in the response. Important to include the \u201cL\u201d as the top-level element.</p> <p>Sub-Table columns</p> <p>Many endpoints include related sub-tables in their responses. Example syntax to include specific sub-table columns.</p> <p>Below example fetches a transmission order description and all it's service row numbers:</p> <p><code>{APIbase_url}/XmTransmissionOrder/wo_no_seq=7655-1?resultColumns={\"jm_work_order\":[\"wo_desc\"],\"mo_service_row\":[\"service_row_no\"]}</code></p> <p>Response: </p><pre><code>{\n    \"jm_work_order\": [\n        {\n            \"mo_service_row\": [\n                {\n                    \"service_row_no\": {\n                        \"external_key\": null,\n                        \"service_row_no\": 9933\n                    }\n                },\n                {\n                    \"service_row_no\": {\n                        \"external_key\": null,\n                        \"service_row_no\": 9934\n                    }\n                }\n            ],\n            \"wo_desc\": \"WS Transmission Test\"\n        }\n    ]\n}\n</code></pre><p></p> <p>Performance recommendation. Always use the resultColumns parameter otherwise responses will return large numbers of fields most of which will not be required and only adds to the system performance overhead. In the future API v3, this will become a mandatory parameter.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#pagination-and-sort-parameters","title":"Pagination and Sort Parameters","text":"<p>API Pagination is available for the GET Query on List endpoints.  </p> Parameter Type Description pageSize Integer is the number of records returned per page page Integer is the page number to return sort String is the field to sort followed by ascending or descending option <p>Sort parameters:  Syntax: <code>sort=[field1 sort, field2 sort]</code> Example: <code>sort=[\"job_desc desc\", \"job_no desc\"]</code> </p> <p>Note: If you don\u2019t specify pageSize, the \u2018page\u2019 and \u2018sort\u2019 options are ignored. If you do specify a pageSize and do not pass a page, page will default to 1.</p> <p>Example: To return the first 10 records on page 1 sorted by product_no: </p><pre><code>GET {APIbaseURL}/JmOrgProductList?query={\"active\":\"Y\"}&amp;resultColumns={\"L\":[\"product_no\",\"product_desc\"]}&amp;sort=[\"product_no desc\"]&amp;pageSize=10&amp;page=1\n</code></pre><p></p> <p>Full example: </p><pre><code>GET {APIbaseURL}/JmJobList?query={\"job_no\":{\"$range\":[1,67982]}}&amp;resultcolumns={\"L\": [\"job_no\", \"job_desc\"]}&amp;pageSize=5&amp;page=7&amp;sort=[\"job_desc desc\", \"job_no desc\"]\n</code></pre><p></p> <p>The above example queries for jobs that have job numbers in the range of 1 to  67982, returns job number and job description fields but only the 7th page with 5 jobs sorted first by description (descending) then by job number (descending).</p> <p>The response header will include a parameter called 'Pagination-Count' which is the count of all records as a result of the query.</p> <p>This will allows you to call for data in manageable payloads without exceeding memory limitations.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#null-value-handling-parameter","title":"Null Value Handling Parameter","text":"<p>This optional parameter suppresses all null value fields from the response payload. Using this parameter reduces the payload size dramatically, especially for larger queries. (v10.6+)</p> <p>Applicable for all GET calls with List, Maintenance &amp; Report endpoints. Values are \u2018ignore\u2019 or \u2018include\u2019 (default). 'include' means that all null values are included in the response.</p> <p>Examples: URL Parameter:- nullvaluehandling=include (default) </p><pre><code>{\n    \"L\": [\n        {\n            \"barcode\": \"MM915\",\n            \"company_name\": null,\n            \"cust_id\": null,\n            \"master_desc\": null,\n            \"master_no\": {\n                \"barcode\": \"MM915\",\n                \"external_key\": \"VX-90\",\n                \"master_no\": 915,\n                \"umid\": null\n...\n</code></pre><p></p> <p>URL Parameter:- nullvaluehandling=ignore (recommended) </p><pre><code>{\n    \"L\": [\n        {\n            \"barcode\": \"MM915\",\n            \"master_no\": {\n                \"barcode\": \"MM915\",\n                \"external_key\": \"VX-90\",\n                \"master_no\": 915\n...\n</code></pre> Notice how all null value fields are omitted.  <p></p> <p>Performance Recommendation It's recommended to always include this parameter with the value 'ignore', unless visibility of null values is required.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#alternate-key-handling-parameter","title":"Alternate Key Handling Parameter","text":"<p>This optional parameter suppresses additional key fields from the responses. If you do not need to work with key fields other than the primary key, use this parameter to keep the API call performant and reduce the processing overhead when not working with alternate key fields. (v10.6+)</p> <p>Applicable for all GET calls with List, Maintenance endpoints.</p> <p>Values are \u2018ignore\u2019 or \u2018include\u2019 (default). \u2018include\u2019 includes alternate keys in the response.</p> <p>Example: URL Parameter:- alternatekeyhandling=include (default) </p><pre><code>{\n    \"L\": [\n        {\n            \"barcode\": \"MM915\",\n            \"company_name\": null,\n            \"cust_id\": null,\n            \"master_desc\": null,\n            \"master_no\": {\n                \"barcode\": \"MM915\",\n                \"external_key\": \"VX-90\",\n                \"master_no\": 915,\n                \"umid\": null\n...\n</code></pre><p></p> <p>URL Parameter:- alternatekeyhandling=ignore\u00a0(recomended) </p><pre><code>{\n    \"L\": [\n        {\n            \"barcode\": \"MM915\",\n            \"company_name\": null,\n            \"cust_id\": null,\n            \"master_desc\": null,\n            \"master_no\": {\n                \"master_no\": 915\n...\n</code></pre><p></p> <p>Notice how the additional key fields barcode, external_key &amp; umid are omitted.</p> <p>Performance Recommendation It's recommended to always include this parameter with the value 'ignore', unless you are working with alternate keys.</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#source-time-zone-name-header","title":"Source Time Zone Name Header","text":"<p>The REST API uses Date time formats in ISO format with an optional offset value.</p> <p>e.g. 2014-11-03T22:20:00+00:00</p> <p>If you omit the offset value when using POST to create a record, you can use a header parameter to set the time zone your dates are using. The advantage of using this header approach, is that it will respect any daylight savings offset applicable to the date given.</p> Header Key Header Value Source-Time-Zone-Name {Windows Time Zone name} e.g.  header: <code>Source-Time-Zone-Name: Pacific Standard Time</code> <p>This example will will create records in the time zone of Pacific Standard Time. Remember to omit the offset values in your time formats. See link for list of Windows Time Zones</p>"},{"location":"REST-API%20Guide/Query%20Parameters%20and%20Filters/#division","title":"Division","text":"<p>(11.1) REST API calls support the ability to pass the Division as an override to the API API user's default Division. </p> <p>An optional header called\u00a0\"Division-Code\" exists where you can include the Division code. This will ensure the correct results are returned for the API users when using Divisions.</p> <p>The API user account must have been given user access to the division to be able to successfully pass it in the API call. If not, you will receive an error message. </p> <p>e.g. Division-Code : GS</p> <p>In postman: </p> <p>This capability replicates the functionality when a user accesses the webapp with their default division,\u00a0 who will see data filtered by their default Division.</p> <p>Applicable only to sites that use the Division feature.</p>"},{"location":"REST-API%20Guide/Save%20Arguments/","title":"Save Arguments","text":"<p>In some cases, you must also add a header to trigger the app server to perform a function as part of an API call. For example, when creating a Work Order, to load a Work Order Template you must provide the SaveArgument parameter as well as including the wo_template_no value in the payload.</p> <p>Below is a list of Save Arguments</p>"},{"location":"REST-API%20Guide/Save%20Arguments/#load-a-template-to-an-order","title":"Load a Template to an order","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-jmworkorder-momediaorder-xmtransmissionorder","title":"Applicable endpoints: JmWorkOrder, MoMediaOrder, XmTransmissionOrder","text":"<p>Loads Work Order Template to an order. </p><pre><code>SaveArgument : {\"LoadTemplate\":\"2\"}\n</code></pre> Where the number represents the number of the template to load.<p></p> <p>To load child templates (available from release 11.3), add an additional parameter called 'LoadChildTemplates' </p><pre><code>SaveArgument:\u00a0{\"LoadTemplate\":\"1012\",\"LoadChildTemplates\":\"Y\"}\n</code></pre><p></p> <p>Example when creating an order using a POST call. The template number must be provided in both the header and the payload.</p> <pre><code>curl --location 'http://{APIbaseURL}/JmWorkOrder' \\\n--header 'Content-Type: application/json' \\\n--header 'SaveArgument: {\"LoadTemplate\":\"15\"}' \\\n--header 'Authorization: Basic \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data '{\n    \"jm_work_order\": [\n        {\n            \"wo_desc\": \"100m Finals\",\n            \"wo_begin_dt\": \"2024-08-22T10:00:00.000Z\",\n            \"wo_end_dt\": \"2024-08-22T16:00:00.000Z\",\n            \"wo_type_no\": 17,\n            \"phase_code\": \"RQST\",\n            \"rate_card_no\": 1,\n            \"cust_id\": 27,\n            \"wo_template_no\": 15\n        }\n    ]\n}'\n</code></pre>"},{"location":"REST-API%20Guide/Save%20Arguments/#load-a-service-template","title":"Load a Service Template","text":"<p>For transmission orders, you can load a Service Template </p><pre><code>SaveArgument : {\"LoadServiceTemplate\":\"10\"}\n</code></pre><p></p> <p>And populate the XmTransmissionOrder payload with service_template_no value </p><pre><code>\"service_template_no\":10\n</code></pre><p></p> <p>Multiple Service Templates can be loaded by including comma separated values: </p><pre><code>SaveArgument : {\"LoadServiceTemplate\":\"10\",\"11\"}\n</code></pre> In this scenario you can leave the \"service_template_no\" in the body as null. <p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#approve-a-bid","title":"Approve a Bid","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-bidversion","title":"Applicable endpoints: BidVersion","text":"<p>Changes the bid approval state of a Bid using number that represents the approval type.</p> <pre><code>SaveArgument : {\"BidApproval\":\"0\"}\n</code></pre> <p>Approval number types:</p> 0Approval1Unapproval2ApproveAsChangeMemo3ApproveAndUnApproveOriginal4Abort <p>Example using a PATCH call to set the 'approved' value and the header save argument. </p><pre><code>curl --location --request PATCH 'http://{APIbaseURL}/BidVersion/version_no=211' \\\n--header 'Content-Type: application/json' \\\n--header 'SaveArgument: {\"BidApproval\":\"0\"}' \\\n--header 'Authorization: Basic \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data '[\n    {\n        \"op\": \"replace\",\n        \"path\": \"approved\",\n        \"value\": \"Y\"\n    }\n]'\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#void-a-work-order","title":"Void a Work Order","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-jmworkorder-momediaorder-xmtransmissionorder_1","title":"Applicable endpoints: JmWorkOrder, MoMediaOrder, XmTransmissionOrder","text":"<p>Function to void an Order.</p> <pre><code>SaveArgument: {\"VoidWorkOrder\":\"36914-1\"}\n</code></pre> <p>Where the number represents the Work Order number sequence.</p> <p>Example using a PATCH call: </p><pre><code>curl --location --request PATCH 'http://{APIbaseURL}/JmWorkOrder/wo_no_seq=2626-1' \\\n--header 'Content-Type: application/json' \\\n--header 'SaveArgument: {\"VoidWorkOrder\":\"2626-1\"}' \\\n--header 'Authorization: Basic \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data '[\n   {\n       \"op\": \"replace\",\n       \"path\": \"cancel_no\",\n       \"value\": 1\n   }\n]'\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#un-void-a-work-order","title":"Un-Void a Work Order","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-jmworkorder-momediaorder-xmtransmissionorder_2","title":"Applicable endpoints: JmWorkOrder, MoMediaOrder, XmTransmissionOrder","text":"<p>Provides the ability to un-void an Order.</p> <pre><code>SaveArgument : {\"UnVoidWorkOrder\":\"1067982-1\"}\n</code></pre> <p>Example using a PATCH call with the header Content-Type : application/json-patch+json </p><pre><code>curl --location --request PATCH 'http://{APIbaseURL}/JmWorkOrder/wo_no_seq=1067982-1'\u00a0\\\n--header 'SaveArgument: {\"UnVoidWorkOrder\":\"1067982-1\"}'\u00a0\\\n--header 'Content-Type: application/json-patch+json'\u00a0\\\n--header 'Authorization: \u2022\u2022\u2022\u2022\u2022\u2022'\u00a0\\\n--data\u00a0''\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#set-the-default-group-of-a-scheduling-resource","title":"Set the default Group of a Scheduling Resource","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-schresource","title":"Applicable endpoints: SchResource","text":"<p>Function to set the default Group of a scheduling resource. The Group must already be assigned to the Resource in the Group list.</p> <pre><code>SaveArgument : {\"GroupCode\":\"UKPS\"}\n</code></pre> <p>Example using a PATCH call with the header Content-Type : application/json-patch+json </p><pre><code>curl --location --request PATCH 'http://{APIbaseURL}/SchResource/resource_code=3' \\\n--header 'Content-Type: application/json-patch+json' \\\n--header 'SaveArgument: {\"GroupCode\":\"TRX\"}' \\\n--header 'Authorization: Basic \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data ''\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#actualise-work-order-actuals","title":"Actualise Work Order actuals","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoints-jmactual","title":"Applicable endpoints: JmActual","text":"<p>v11.1 To actualize selected or all transactions. This save argument will update the transaction and order phase, effectively posting the actuals.</p> <pre><code>saveArgument : { \"ActualizeSelected\":\"38521,38522\", \"ActualizeUpdatePhase\":\"Y\"}\n</code></pre> <p>Variations:</p> <pre><code>saveArgument : { \"ActualizeAll\":\"-2\", \"ActualizeUpdatePhase\":\"Y\"}\n\nSaveArgument : { \"ActualizeSelected\":\"-2,200003,200004\", \"ActuallizeUpdatePhase\":\"Y\"}\n</code></pre> <p>Intended to be used in conjunction with the POST of actual actions. This save argument then performs the action of actualization.</p> <p>Example single transaction actualization without times: </p><pre><code>curl --location 'http://{APIbaseURL}/JmActual/' \\\n--header 'Content-Type: application/json' \\\n--header 'SaveArgument: { \"ActualizeSelected\":\"1259520\", \"ActualizeUpdatePhase\":\"Y\"}' \\\n--header 'Authorization: \u2022\u2022\u2022\u2022\u2022\u2022' \\\n--data '{\n\u00a0 \u00a0 \"jm_actual_header\": [\n\u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_hdr_no\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_hdr_no\": -1\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"wo_no\": 9453,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"wo_seq\": 1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"wo_no_seq\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"wo_no_seq\": \"1075881-1\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_status\": \"Y\",\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"jm_actual_detail\": [\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_hdr_no\": -1,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_det_no\": -2,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"action_code\": {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"action_code\": \"I\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 },\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_unit\": 4,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual\": \"Y\"\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ],\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"jm_actual_link\": [\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_link_no\": -3,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"actual_det_no\": -2,\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"trx_no\": 1259520\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ]\n\u00a0 \u00a0 \u00a0 \u00a0 }\n\u00a0 \u00a0 ]\n}'\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#post-time-card-batch","title":"Post Time Card Batch","text":""},{"location":"REST-API%20Guide/Save%20Arguments/#applicable-endpoint-tcbatch","title":"Applicable endpoint: TcBatch","text":"<p>v11.1 Replicates the action UI menu item to 'Post' the batch.  </p><pre><code>saveArgument : {\"Post\":\"\"}\n</code></pre><p></p> <p>Example PATCH payload: </p><pre><code>curl --location --request PATCH '/TcBatch/batch_no=7572' \\\n--header 'Content-Type: application/json-patch+json' \\\n--header 'saveArgument: {\"Post\":\"\"}' \\\n--header 'Authorization: Basic aHR0cDovL2RldndjdW1wYXBwMjoxMTAwMC9hcGkvdjIvZGF0YWJhc2UvWFlUX01BSU5fVjp4eXRlY2hwdw==' \\\n--data '{\n    \"tc_batch\": [\n        {\n            \"batch_no\": {\n                \"batch_no\": \"7572\"\n            }\n        }\n    ]\n}'\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Save%20Arguments/#multiple-save-arguments","title":"Multiple Save Arguments","text":"<p>Where applicable, multiple save arguments can be used as an array separated by a comma. Example: </p><pre><code>SaveArgument : {\"LoadServiceTemplate\":\"10\",\"LoadTemplate\":\"2\"}\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Upsert/","title":"Upsert / PUT","text":"<p>Upsert provides the ability to create records if they don't already exist, or update them if they do. Upsert functionality is provided using the PUT method and is available on all maintenance document types. (v11.0+)</p>"},{"location":"REST-API%20Guide/Upsert/#put-payload-concepts","title":"PUT payload concepts","text":"<p>The most common use of the PUT method will be where a 3rd party identifier is known and you wish to create or update a Xytech record. The external identifier is likely to be stored in the \"external_key\" field of the record.</p> <p>What is important, is to supply the external_key field  1. In the URL 2. As a payload field within the key field object (this is for lookup of existing record) 3. Within the root body of the payload (this is for inserting the value) This will ensure correct insert or update functionality.</p> <p>Example to upsert a Job: </p><pre><code>curl --location --request PUT 'https://{APIbaseURL}/JmJob/external_key=PH20250205a' \\\n--header 'Content-Type: application/json-patch+json' \\\n--header 'Authorization: Basic ********' \\\n--data '{\n    \"jm_job\": [\n        {\n            \"job_no\": {\n                \"external_key\": \"PH20250205a\"\n            },\n            \"external_key\": \"PH20250205a\",\n            \"division_no\": 12,\n            \"cust_id\": \"010\",\n            \"job_desc\": \"test2\",\n            \"job_type_no\": 163,\n            \"account_rep_no_1\": 18,\n            \"active\": \"Y\"\n        }\n    ]\n}'\n</code></pre><p></p> <p>You will receive the ID of the created record if one does not already exist matching the external_key. If you send the same payload again, you will receive a 2xx success code, no new ID as the record already exists (any changes would update the record).</p> <p>See the OpenAPI definition on endpoint details and the Postman collection for examples.</p>"},{"location":"REST-API%20Guide/Upsert/#deleting-existing-sub-table-records","title":"Deleting existing sub-table records","text":"<p>When performing an upsert, you may wish to clear any existing sub-table records before adding new ones. This can be done in a single API call by adding a header.</p> <p>Syntax: <code>rowAction : {\"deleteAll\":[\"{sub-table}]}</code> Example: endpoint /LibMaster <code>rowAction value: {\"deleteAll\":[\"lib_master_audio\"]}</code> This will delete all existing audio records of the library asset (and add new ones if defined in the payload)</p> <p>Optionally, you can delete multiple sub-tables by including separating comma: Syntax: <code>rowAction : {\"DeleteAll\":[\"&lt;sub table name&gt;\",\"&lt;sub table name&gt;\"]}</code></p> <p>Full example: In this example we're creating or updating a library asset with a barcode identifier, if the record already exists the system will delete any existing audio and title records and create new audio and title records. </p><pre><code>curl --location --request PUT 'http://{APIbaseURL}/LibMaster/barcode=XYZ19030504' \\\n--header 'Content-Type: application/json-patch+json' \\\n--header 'rowAction: {\"DeleteAll\":[\"lib_master_audio\",\"lib_master_title\"]}' \\\n--header 'Authorization: Basic **************' \\\n--data '{\n    \"lib_master\": [\n        {\n            \"master_no\": {\n                \"barcode\": \"XYZ19030504\"\n            },\n            \"master_desc\": \"My Content 40\",\n            \"asset_type_no\": \"1\",\n            \"lib_master_title\": [\n                {\n                    \"title_no\": {\n                        \"title_no\": \"36\"\n                    }\n                }\n            ],\n            \"lib_master_audio\": [\n                {\n                    \"audio_desc\": \"Stereo Left\",\n                    \"audio_content_desc\": \"English\",\n                    \"track_language\": \"English\",\n                    \"audio_channel\": \"1\"\n                },\n                {\n                    \"audio_desc\": \"Stereo Right\",\n                    \"audio_content_desc\": \"English\",\n                    \"track_language\": \"English\",\n                    \"audio_channel\": \"2\"\n                }\n            ]\n        }\n    ]\n}'\n</code></pre><p></p>"},{"location":"REST-API%20Guide/Using%20Postman%20and%20cURL/","title":"Using Postman and cURL","text":""},{"location":"REST-API%20Guide/Using%20Postman%20and%20cURL/#xytech-public-postman-collection","title":"Xytech Public Postman Collection","text":"<p>An extensive set of example API calls is available via the Platform\u2019s REST API Postman Collection which you can your fork so that you can pull for future updates. This collection contains many example calls, including basic payload version to get you started.</p>"},{"location":"REST-API%20Guide/Using%20Postman%20and%20cURL/#using-curl-as-a-test-client","title":"Using cURL as a test client","text":"<p>cURL is a lightweight command line API client used for testing and troubleshooting.</p> <p>Example curl to fetch job details (replace authorization string, baseURL and database name with your values) </p><pre><code>curl --location 'https://baseURL/api/v2/database/DEMO/JmJob/job_no=342' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic eHl0ZWNoOnh5dGjaHB3' \\\n</code></pre><p></p>"},{"location":"REST-API%20Guide/What%27s%20New/","title":"What's New","text":""},{"location":"REST-API%20Guide/What%27s%20New/#v113","title":"v11.3","text":""},{"location":"REST-API%20Guide/What%27s%20New/#oauth-20-openid-authentication-for-rest-api","title":"OAuth 2.0 OpenID Authentication for REST API","text":"<p>Two methods are supported - Client Credentials method (system to system access) - SPA / browser sign-in method (interactive user authentication flow)</p> <p>Pre-requisites Your auth provider has been configured and the Xytech app server has been configured. (Azure and Okta/Auth0)</p> <p>Client-Credentials method, from auth provider you needs: - Access token URL - Client ID - Client Secret - Scope</p> <p>For SPA method you nee: - Authorisation URL - Access token URL - Client ID - Client Secret - Scope</p> <p>Summary flow: Obtain token from auth provider Use token to make REST API calls until token expires.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#jwt-token-authentication","title":"JWT Token authentication","text":"<p>For use case scenarios where database user accounts are employed. Typical use might be for system to system authentication requirements.</p> <p>Pre-requisite Xytech app server has been configured for JWT authentication</p> <p>Summary flow: Retrieve token passing login credentials in the POST body Use token for all subsequent API calls, until token expires</p> <p>See additional authentication user guides for more details.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#child-templates-of-work-order-templates-are-now-loaded","title":"Child templates of Work Order Templates are now loaded.","text":"<p>When creating or updating an order you can load a work order template along with any child templates associated. This has been accomplished by adding an additional optional parameter to the existing Save Argument called 'LoadChildTemplates'</p> <p>e.g.\u00a0header:  </p><pre><code>SaveArgument:\u00a0{\"LoadTemplate\":\"1012\",\"LoadChildTemplates\":\"Y\"}\n</code></pre> (25746)<p></p>"},{"location":"REST-API%20Guide/What%27s%20New/#ability-to-enable-custom-drop-down-fields-to-return-additional-attributes","title":"Ability to enable custom drop-down fields to return additional attributes","text":"<p>Users can now enable custom dropdown fields (through a new document customisation flag 'Additional API details', so that when called by the REST API will return the additional attributes stored with the dropdown record such as external_key.</p> <p>Document Customisation fields showing additional checkbox: </p> <p>Example of a custom drop-down field when 'Additional API details' is not enabled: </p> <p>Example of a custom drop-down field when 'Additional API details' is enabled: </p> <p>(28200)</p>"},{"location":"REST-API%20Guide/What%27s%20New/#fixes","title":"Fixes","text":"<p>For a full list, refer to the 11.3 release notes. </p>"},{"location":"REST-API%20Guide/What%27s%20New/#response-status-codes-in-swagger-documentation-now-reflect-the-correct-values-for-the-2xx-range","title":"Response status codes in Swagger documentation now reflect the correct values for the 2xx range.","text":"<p>Resolves an issue where the OpenAPI (Swagger) documentation for certain REST API endpoints did not accurately reflect the actual HTTP response value, such as the 200 Ok response calling the POST method for the /JmJob endpoint (previously 204). (26278)</p>"},{"location":"REST-API%20Guide/What%27s%20New/#post-datetime-fields-ignore-offset-attribute","title":"POST datetime fields ignore offset attribute","text":"<p>Resolves a REST API issue when using POST,\u00a0 datetime offset attributes on date times values were being ignored. Date formats can include the time offset e.g.\u00a0\"2024-12-05T04:00:00-08:00\" (27932)</p>"},{"location":"REST-API%20Guide/What%27s%20New/#v112","title":"v11.2","text":"<p>Fixes</p>"},{"location":"REST-API%20Guide/What%27s%20New/#jmwotransaction","title":"JmWoTransaction","text":"<p>Resolved an issue where the API documentation for JmWoTransaction incorrectly omitted the required wo_no_seq parameter.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#api-pagination-count-incorrect-value-for-pages-after-1","title":"API Pagination Count incorrect value for pages after 1","text":"<p>Resolves a REST API pagination issue, where the Pagination Count (found in the response header) was responding with in incorrect value.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#error-loading-service-templates","title":"Error Loading Service Templates","text":"<p>Resolves an issue when creating a Media Order or Transmission Order via the REST API where a service row field value was set incorrectly (dsp_seq), creating invalid orders.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#v111","title":"v11.1","text":""},{"location":"REST-API%20Guide/What%27s%20New/#division","title":"Division","text":"<p>REST API calls now support the ability to pass the Division as an override to the API API user's default Division. </p> <p>A new optional header called\u00a0\"Division-Code\" exists where you can now include the Division code. This will ensure the correct results are returned for the API users current Division. The API user account must have user access to the division to be able to successfully pass it in the API call. If not, you will receive an error message. </p> <p>e.g. Division-Code : GS In Postman: </p>"},{"location":"REST-API%20Guide/What%27s%20New/#response-body-on-creation","title":"Response body on creation","text":"<p>POST calls now include sub-table IDs of any sub-table records created by the call.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#attachment-file-upload","title":"Attachment File Upload","text":"<p>The REST API now provides the ability to upload an attachment file that auto creates the attachment record. </p> <p>The file type needs to already exist as a defined Attachment Type (System - Setup - Attachment Types) to be successfully uploaded. The ability to delete is also provided.</p> <p>The attachment record will be auto created assigning the matching Attachment Type and description as the filename.  </p> <p>Multiple files can be uploaded in a single POST API call. Use form-data for the body.</p> <p>Endpoint: <code>/SysAttachment/attachment_keystring=10339:100-1</code> Where attachment_keystring is made up of a concatenation of document ID and record ID</p> <p>e.g.  - Document ID for Work Orders = 10339 (see document customisation list for IDs) - A specific Work Order ID = 100-1 The response will include the IDs of the created attachment records.</p> <p>Full cURL example: </p><pre><code>curl --location 'https://devwcumpapp2.xytech.xytechsystems.com/xyt_main/api/v2/database/XYT_MAIN_RUBY_V/SysAttachment/attachment_keystring=10339:100-1' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic xxxxxxxxxxxxxxxxxxxx' \\\n--form '=@\"/C:/temp/DetailsOn100-1.txt\"' \\\n--form '=@\"/C:/temp/A File.pdf\"'\n</code></pre><p></p> <p>Postman:  Delete attachment file example: <code>DELETE {{server}}/SysAttachment/attachment_keystring=10339:100-1/sys_attachment/attachment_no=2205</code></p>"},{"location":"REST-API%20Guide/What%27s%20New/#syscontactfacade-ability-to-create-user-and-vendor-profiles","title":"SysContactFacade ability to create User and Vendor profiles","text":"<p>The existing /SysContactFacade endpoint now supports the creation and updating of User and Vendor contact types (profiles).</p>"},{"location":"REST-API%20Guide/What%27s%20New/#additional-query-parameters","title":"Additional query parameters","text":""},{"location":"REST-API%20Guide/What%27s%20New/#notin-not-in","title":"NOTIN (Not in)","text":"<p>Ability to query where a field's value does not match an array of supplied values. Usage example: {{server}}/PmProjectList?query={\"project_desc\":{\"$notin\":[\"test\", \"Sarah\"]}} Applies to GET queries.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#likeand-like-and","title":"LIKEAND (Like and)","text":"<p>Ability to define an array of matching values that all have to match regardless of the order defined.  {{server}}/LibMasterList?{\"master_desc\":{\"$LIKEAND\":[\"%Genesis%\",\"%XHD%\"]} Applies to GET queries.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#swaggeropenapi-definition-now-downloadable-as-json","title":"Swagger/OpenAPI definition now downloadable as JSON","text":"<p>The Swagger document definition now provides the ability to download the definition as a JSON file instead of a YAML.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#link-child-titles-to-parent-in-single-api-call","title":"Link child titles to parent in single API call","text":"<p>REST API now provides a new endpoint that gives the ability to manage new or existing Titles and assign the Title to a parent Title in a single API call. New endpoint:\u00a0/LibTitleHierarchyFacade.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#known-issues","title":"Known issues","text":""},{"location":"REST-API%20Guide/What%27s%20New/#there-are-differences-in-the-way-swagger-reports-a-payload-definition-between-post-get-calls","title":"There are differences in the way Swagger reports a payload definition between POST &amp; GET calls.","text":"<p>Swagger defines the payload for a sub-table GET differently to how the REST API actually responds.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#v110","title":"v11.0","text":""},{"location":"REST-API%20Guide/What%27s%20New/#upsert-is-now-supported-via-the-put-method","title":"'upsert' is now supported via the PUT method","text":"<p>Ability to create or update if record already exists. see: Upsert</p>"},{"location":"REST-API%20Guide/What%27s%20New/#compression-is-now-supported","title":"Compression is now supported","text":"<p>Compression is enabled by default when making calls using a standard header: <code>Accept-Encoding:\u00a0\u00a0gzip\u00a0or deflate</code> This applies to all API methods.</p> <p>A couple of real-world examples that shows the benefit of using compression, where a list of transactions were retrieved using a GET list endpoint for a date range:</p> <p>Example #1 Without compression:  Takes 5 seconds and has a payload of 4.4 MB. With compression:  Takes 4 seconds and has a payload of 142 KB.  </p> <p>Example #2 Without compression:  22 seconds with response size of 9.47 MB With compression:  8 seconds with response size of 320 KB In this example, compression made the payload a 30th the size.</p> <p>It is recommend to always use compression.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#greater-than-and-less-than-new-query-parameters","title":"Greater than and less than new query parameters","text":"<p>You can now use query parameters with: - LessThanOrEqual ($lte) - LessThan\u00a0($lt) - GreaterThanOrEqual\u00a0($gte) - GreaterThan\u00a0($gt)</p> <p>e.g. Title numbers greater than 106438 {\"title_no\":{\"$gt\": \"106438\"}}</p>"},{"location":"REST-API%20Guide/What%27s%20New/#ability-to-use-resultcolumns-for-defining-sub-table-fields-to-return-on-maintenance-docs","title":"Ability to use resultColumns for defining sub-table fields to return on maintenance docs.","text":"<p>When calling a maintenance document using a GET that includes a URL sub-table filter, you can now use the 'resultColumns'\u00a0 parameters to define the fields you want returned in the response body. Previously the resultColumns parameter was only respected for the primary table and all fields were returned for the sub-table.\u00a0By specifying the fields you want returned helps maintain overall system performance.</p> <p>Example defining the field value you want returned from a Job subtable called Episode: </p><pre><code>{{server}}/JmJob/job_no=342/jm_episode?resultColumns={\"jm_episode\":\"title_no\"}\n</code></pre> This will return only respond with the Episode title_no values for job 342<p></p> <p>A more complex example where there is a sub-sub-table are involved: </p><pre><code>{{server}}/XmTransmissionOrder/wo_no_seq=1072992-1/mo_service_row/service_row_no=221083/mo_operation/operation_no=133119?resultColumns={\"mo_operation\":[\"operation_no\",\"task_no\",\"trx_resource_desc\",\"trx_group_desc\"]}\n</code></pre> Returns Operation details for a transmission order for a specific Service Row.<p></p>"},{"location":"REST-API%20Guide/What%27s%20New/#corrected-null-date-values","title":"Corrected null date values","text":"<p>Fixed in v10.6SP1 and v11.0 Creating date fields with a null value now correctly sets the date value to null as opposed to \"0001-01-01T00:00:00\" Applies to POST/PUT/PATCH methods.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#syscontactfacade","title":"SysContactFacade","text":"<p>POST to SysContactFacade no longer responds with the ID of the created record in the header, instead it now responds with the ID within the response body. This is due to the fact that SysContactFacade is capable of creating multiple new records and the header can only provide a single ID value.</p>"},{"location":"REST-API%20Guide/What%27s%20New/#v106","title":"v10.6","text":"<ul> <li>Swagger documentation now includes the PATCH method using a POST payload</li> <li>Swagger includes example payloads for sub-tables (previously not populated).</li> <li>Swagger now includes PATCH method for list documents.</li> <li>Other Swagger improvements and correct missing parameter fields.</li> <li>Additional header parameters for optimization and filtering<ul> <li>Ignore alternate keys</li> <li>Omit null values</li> <li>Filter results for maintenance documents</li> </ul> </li> </ul>"},{"location":"Webhooks%20Guide/","title":"Webhooks Introduction","text":"<p>Introduced from release v10.4 this feature enables users, through the platform UI, to configure triggers that send API payloads to external Web service endpoints. This mechanism allows external systems to initiate workflows based on Xytech-generated trigger events.</p> <p></p> <p>This feature enhances the existing Event Trigger functionality by adding a new notification type. Setup items: - Outbound connection - Stores the connectivity details of the external endpoint - Export Adaptor - Stores one or more endpoints for an Outbound Connection - Event Trigger - Trigger condition, payload structure and fields used to dynamically generate the JSON or XML payload to send to an Export Adaptor's endpoint.</p> <p>Figure 1 - Webhooks Related Data Objects </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/","title":"Event Trigger","text":"<p>The Webhooks functionality builds on the existing Event Trigger features of the Media Operations Platform, providing a notification template option where you can assign an Export Adaptor and the payload template.</p> <p>The Event Trigger defines the criteria that determine when a payload is sent, the method and content of the payload, and the Export Adapter to which it is sent.</p> <ul> <li>The Event Triggers and Conditions tabs determine the criteria of when to send payloads.</li> <li>The Notifications tab determines the method used to send the payload.</li> <li>The Notification Template tab determines the destination of the trigger content.</li> </ul> <p>Refer to the Online Help for more information about Event Triggers and how to configure them.</p> <p>Event Trigger </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#event-trigger-options-described","title":"Event Trigger options described","text":"ActiveSelect (check) to make this payload active, or deselect (clear) to stop sending messages for this payload.Event CodeUse the event code of NOTIFYEventDescription of the triggerEvent Type<p>Select when to trigger:</p><p>INSERT sends messages when a record is first created.</p><p>UPDATE sends messages when a record is modified.</p><p>DELETE sends messages when a record is deleted.</p>DocumentSelect the data object for the trigger.Doc Table NameSelect the sub-table of the document for the trigger.AccessSelect Global to trigger payloads for the entire system, or select an access method (Division or Work Group) to limit payloads to a specific subset of the system.DivisionWhen Access is set to Division, select the Division for which payloads will be sent. Only documents related to the selected Division will generate payloads.Work GroupWhen Access is set to Work Group, select the Work Group for which payloads will be sent. Only documents related to the selected Work Group will generate payloads."},{"location":"Webhooks%20Guide/Event%20Trigger/#conditions","title":"Conditions","text":"<p>Defines the field conditions that initiate a trigger, such as when a specific field is set or modified.</p> <p>_ Event Trigger Conditions_ </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#notifications","title":"Notifications","text":"<p>Establishes the notification type \u2013 select \u2018Email/Alert\u2019 for webhooks.</p> <p>Event Trigger Notification Type_ </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#notification-template","title":"Notification Template","text":"<p>Defines the action to take for the trigger.</p> <p>Event Trigger Layout for Export Adaptor</p> <p></p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#export-adaptor-trigger-details","title":"Export Adaptor Trigger Details","text":"<p>Select the Export Adaptor to use.</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#generate-default-template","title":"Generate Default Template","text":"<p>Click to generate a standard payload template for the selected Document, Event Type, and Export Adaptor.</p> <p>If any of the Document, Event Type, or Export Adaptor Type definitions change, you should re-generate the default template which will overwrite the previous template. If manual changes have been made to the template, you can update manually or note the additions prior to regenerating the template and reapply the changes.</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#export-adaptor-template","title":"Export Adaptor Template","text":"<ul> <li>Displays the payload template used to generate the payload.</li> <li>Either in JSON or XML format. (The format of the template should match the format specified in the Export Adapter that will use the template.)</li> <li>Syntax validation will occur when saving the Event Trigger and you will not be able to save if the template contain invalid JSON/XML syntax.</li> <li>Users can add document fields to the payload using the syntax [table.fieldName].    Additionally, users can drag and drop a field from the Template Fields list on the left into the payload template field.  Note. You can only include fields on the template from the primary triggered document and not from related tables.</li> </ul> <p>Dragging a field from the Template Fields list into the payload template. </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#parsing-and-storing-of-response-payload-values","title":"Parsing and storing of response payload values","text":"<p>Web hooks includes the ability to store a value(s) received in the response body back into a field from the triggered document.  Note: This means that if an Operation in a Media Order generated a trigger, you can update a field in the Operation and not the Media Order or other related documents.</p> <p>This allows Xytech to store the ID generated by an external system as a result of a web hook POST that creates the record.</p> <p>Supported is the parsing of scalar and single values to be read and stored. Not arrays or JSON objects.</p> <p>Can only store values back into the originating document, not related documents.</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#configure-export-adaptors-response-format","title":"Configure Export Adaptor's response format","text":"<p>The Export adaptor includes a \u2018Response Format\u2019 parameter to define the expected response format.</p> <p>Figure 1 - Response Format  If you don\u2019t specify a content type , the default will be plain text. The storing of Notes and Blob base64 image values is supported.</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#event-trigger-response-parsing-template","title":"Event Trigger Response Parsing Template","text":"<p>The Event Trigger includes a new field to define the Export Adaptor\u2019s \u2018Response Parsing Template\u2019. Here you will add the parse criteria in the format of: <code>&lt;table name.field name&gt; = response.&lt;parse field&gt;</code>.</p> <p>Figure 2 - Response Parsing Template </p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#to-parse-json","title":"To Parse JSON","text":"<p>Example response payload: </p><pre><code>{\n    \"data\": {\n        \"desc\": \"This is sample description.\",\n        \"id\": \"ABCEFJ23454\"\n    }\n}\n</code></pre><p></p> <p>Note: always include the response prefix.</p> <p>If the originating document was Title and you wanted to store the 'id' value into \u2018external_key\u2019, then it would look like this: [lib_title.external_key] = response.data.id</p> <p>You can store more than one value from the response payload:  e.g.: [table.field1] = response.data.id [table.field2] = response.data.desc</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#to-parse-xml","title":"To Parse XML","text":"<p>To parse an XML response, use  XPATH syntax. W3Schools XPath tutorial: https://www.w3schools.com/xml/xpath_intro.asp</p> <p>Simple parse: [lib_title.external_key] = response/desc</p> <p>An attribute of an element: [lib_title.external_key] = response/catalog/book/@id        </p> <p>Return all values under /response as text [lib_title.title_desc_2] = response</p> <p>Example XML: </p><pre><code>&lt;?xml version=\"1.0\"?&gt;\n&lt;catalog&gt;\n     &lt;book id=\"bk101\"&gt;\n        &lt;author&gt;Gambardella, Matthew&lt;/author&gt;\n        &lt;title&gt;XML Developer's Guide&lt;/title&gt;\n        &lt;genre&gt;Computer&lt;/genre&gt;\n        &lt;price&gt;44.95&lt;/price&gt;\n        &lt;publish_date&gt;2000-10-01&lt;/publish_date&gt;\n        &lt;description&gt;An in-depth look at creating applications \n        with XML.&lt;/description&gt;\n     &lt;/book&gt;\n     &lt;book id=\"bk102\"&gt;\n        &lt;author&gt;Ralls, Kim&lt;/author&gt;\n        &lt;title&gt;Midnight Rain&lt;/title&gt;\n        &lt;genre&gt;Fantasy&lt;/genre&gt;\n        &lt;price&gt;5.95&lt;/price&gt;\n        &lt;publish_date&gt;2000-12-16&lt;/publish_date&gt;\n        &lt;description&gt;A former architect battles corporate zombies, \n        an evil sorceress, and her own childhood to become queen \n        of the world.&lt;/description&gt;\n     &lt;/book&gt;\n&lt;/catalog&gt;\n</code></pre><p></p> <p><code>[lib_title.external_key] = response/catalog/book/@id</code>      returns the first id 'bk101' <code>[lib_title.title_desc_2] = response/catalog/book[@id='bk102']/title</code>   returns 'Midnight Rain'</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#text-response","title":"Text Response","text":"<p>Where a text response is configure, the system will store the whole text payload. If the response value returned is too big to store in the target field, it will get truncated. Any existing values in the database will get overwritten with the new value.</p> <p>Example: [lib_title.title_desc_2] = response</p> <p>The prefix of 'response' is mandatory to represent the response payload.</p>"},{"location":"Webhooks%20Guide/Event%20Trigger/#tip","title":"TIP","text":"<p>It is important to ensure the data type or the target field matches the parsed field. In other words, you will not be able to store a string value into a numeric field. Else you will see a response parsing error in the Exp[ort Adaptor Log: \"System encountered problem with saving Parsed Response into Database\"</p>"},{"location":"Webhooks%20Guide/Export%20Adaptor%20Logs/","title":"Export Adaptor Logs","text":"<p>When Export Adaptors are enabled for logging, all Export Adaptor communications will be logged into the Export Adaptor Log to assist with auditing and troubleshooting. (By default, logging is enabled for all adaptors.) From the navigation menu, click System and click Export Adaptor Logs to view the log entries.</p> <p>Figure 9 - Export Adaptor Logs List</p> <p></p> <p>Click the ID in the Export Adaptor Log No column to view the details of a log entry, including all relevant values such as date times and request/response payloads.</p> <p>Figure 10 - Export Adaptor Log Entry</p> <p></p>"},{"location":"Webhooks%20Guide/Export%20Adaptor%20Logs/#action-menu","title":"Action Menu","text":"<p>There is an Action Menu item on individual documents to display a filtered Export Adaptor Log for that specific document. For example, when viewing a Work Order, the Action Menu item filters the log entries to that specific Work Order only.</p> <p>Export Adaptor Logs on the Work Order Action Menu</p> <p></p>"},{"location":"Webhooks%20Guide/Export%20Adaptor%20Logs/#auto-log-clean-up","title":"Auto Log Clean-Up","text":"<p>To prevent the log tables from growing exponentially due to large payload values, a periodic clean-up process removes the request and response payloads from \"old\" log items. The system retains the log entry that provides information that the payload was sent but removes the payloads. The default setting for this process is to clean up log items older than 60 days. This setting can be manually overwritten if required via the Application Server configuration settings.</p>"},{"location":"Webhooks%20Guide/Export%20Adaptor/","title":"Export Adaptor","text":"<p>Export Adaptors define the endpoint(s) for an Outbound Connection. An Export Adaptor is assigned to a specific Event Trigger so that the triggered payload knows where to be sent.</p> <p>Figure 3 - Layout for External Adaptor Setup</p> <p></p> Setting Description Description Enter a label for this adapter, such as the purpose and criteria of the message. Output Type Select the type of system to which messages will be sent. Currently, only REST is supported. Output Format Select the standard used to format outbound data, either JSON or XML. Response Format Select the expected standard format for the response payload (if a response is expected). Output Method Select the method or verb used to send messages. Available options include POST, PATCH, GET, PUT and DELETE. Connection Select the Outbound Connection to use for this Export Adaptor. Endpoint Add the endpoint of the API and include the initial backslash. E.g. /orders. The endpoint can include URL Parameters, as described in below If there is no endpoint and the payload can be sent to the base URL, simply add a forward slash \u2018/\u2019 into the endpoint field. Retry Count If there is no response from the endpoint, the retry count defines the number of times the system will attempt to send the payload before trying the other Outbound Connection URL (if one has been defined). Retry Delay If there is no response from the endpoint, the retry count defines the number of times the system will attempt to resend the payload. After completing the reties, the Export Adaptor will fail-over to the Outbound Connection URL (if more than one URL has been defined). Zero = no retries after first attempt. Time Out The duration in seconds to wait for a response from the endpoint. Disable Logging Select (check) to stop capturing activity into the Export Adaptor Log. Headers Provides the ability for the webhook to send custom headers and whether they are to be treated as Content Headers (default = false).Note: in this release you cannot add a Content-Type override from the system generated one e.g 'application/json' when JSON is the outbound format. This is possible from v11.1"},{"location":"Webhooks%20Guide/Export%20Adaptor/#url-parameters","title":"URL Parameters","text":"<p>URL Parameters can be added to endpoints that include a combination of static text and dynamically populated values from the triggered document. Use the same field naming convention when defining the payload template for an Event Trigger.  </p> <p>Examples: -  Endpoint field: <code>order/external_key=[jm_job.external_key]</code> -  Endpoint field: <code>order/job_no=[jm_job.job_no]/jm_episode]</code></p>"},{"location":"Webhooks%20Guide/Outbound%20Connection/","title":"Outbound Connection","text":"<p>Outbound Connection defines and sets up the external system\u2019s URL and authentication that are common to one or more endpoints defined by the External Adaptor.</p> <p>Figure 2 - Layout of an Outbound Connection</p> <p></p> Setting Description Description Enter a label for the connection, such as the name and version of the external system or interface. External Key Optionally enter a label to identify the external system, as with any Xytech document. Authentication Method Select the method used to log in to the external system:-   Basic - Enter the Username and Password, below.-   API Key \u2013 Enter the Key and Value pair into the Username and Password fields. Base URL 1 Base URL 1 is required. (exclude any trailing '/') Base URL 2 Base URL 2 is optional. (exclude any trailing '/') Username Enter the login account used to authenticate to the external system Password Enter the login account used to authenticate to the external system <p>Base URL Fail-over</p> <p>Where you have specified a secondary URL, the fail-over logic will become enabled.</p> <p>If Base URL 1 does not respond after the retry count, set in the Export Adaptor, the system will then fail-over to Base URL 2.</p> <p>Assuming Base URL 2 is successful, all following triggers will continue to first be sent to Base URL 2.</p> <p>If Base URL 2 fails to respond, then the system will fail-over back to Base URL 1.\u00a0</p> <p>If both Base URLs are unavailable, the system will give up after the fail-over Base URL fails to respond. (it will not continue to flip-flop between Base URLs)</p>"},{"location":"Webhooks%20Guide/Tips%20and%20Troubleshooting/","title":"Tips and Troubleshooting","text":""},{"location":"Webhooks%20Guide/Tips%20and%20Troubleshooting/#email-notification-of-a-failure","title":"Email Notification of a failure","text":"<p>If you want to be notified by email or an alert pop-up when a webhook fails to send or receives an error response, you can set up an additional Event Trigger on the Export Adaptor Log with a condition set to trigger on receiving an error response status code (or whatever is the most appropriate trigger condition for your integration).</p>"},{"location":"Webhooks%20Guide/Tips%20and%20Troubleshooting/#troubleshooting","title":"Troubleshooting","text":"<p>Trigger Condition Report While testing an Event Trigger, it\u2019s recommended to validate the trigger conditions by using the Event Trigger Report run from the modified record to check whether the trigger condition is met prior to saving the record. You can find this on the Action Menu - Document</p> <p>Test by Creating a Mock Web Service using Postman There are many ways to create a mock Web service for testing. One of the easiest is to use tools such as Postman (https://www.postman.com/) or WireMock (https://wiremock.org/).</p>"},{"location":"Webhooks%20Guide/Tips%20and%20Troubleshooting/#known-issues","title":"Known Issues","text":""},{"location":"Webhooks%20Guide/Tips%20and%20Troubleshooting/#url-parameters-not-populated-using-get-method-v110","title":"URL Parameters not populated using GET method (v11.0)","text":"<p>In some scenarios, when configuring an Export Adaptor to include a URL parameter with a value that's a document field, the parameter fails get populated. A workaround that forces the parameter to be populated correctly, is to additionally add the field to the Alert Template of the Event Trigger. The Alert Template does not need to be configured to actually send the alert (by omitting any alert users). e.g.  This issue is not present from v11.1 onwards.</p>"},{"location":"Webhooks%20Guide/What%27s%20New/","title":"What's New","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#v113","title":"v11.3","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#ability-to-disable-export-adaptors-or-outbound-connections","title":"Ability to disable Export Adaptors or Outbound Connections","text":"<p>The webhooks feature now has the ability to deactivate Export Adaptors or Outbound Connections. This can be very useful especially when restoring a backup onto a test or development instance to prevent accidental outbound integrations from happening to production external services. (26565)</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#iso-datetime-formats","title":"ISO Datetime formats","text":"<p>Export Adaptors now includes an optional flag to send all dates in ISO standard format. (27017)</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#ability-to-include-child-table-field-values","title":"Ability to include child-table field values","text":"<p>https://dev.azure.com/xytsystems/Xytech%20Platform/_workitems/edit/24750 Export adaptor payloads can include an array of values from child tables. The syntax requires the array fields to be nested under child table tags using specific syntax as shown in the example below.\u00a0</p> <pre><code>#[&lt;child table name&gt;]\n    &lt;fields&gt;\n#[/&lt;child table name&gt;]\n</code></pre> <p>The JSON syntax must be manually managed around these table tags. You can drag and drop fields from the child table onto the template text area where the prefix syntax of the table name will be automatically applied.</p> <p>An example Export Adaptor payload template for a Media Order Event Trigger that includes a list of Services and a list of Operations. </p><pre><code>{\n\u00a0 \"document\": \"MoMediaOrder\",\n\u00a0 \"id\": \"[jm_work_order.wo_no_seq]\",\n\u00a0 \"idField\": \"wo_no_seq\",\n\u00a0 \"details\": [\n        {\n    \u00a0 \u00a0 \u00a0 \u00a0\"services\": [\n            \u00a0 \u00a0 #[mo_service_row]\n        \u00a0 \u00a0 \u00a0 \u00a0 {\n        \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"[mo_service_row.service_desc]\",\n        \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"service_row_no\": \"[mo_service_row.service_row_no]\"\n        \u00a0 \u00a0 \u00a0 \u00a0 }\n            \u00a0 \u00a0 #[/mo_service_row]\n        \u00a0 \u00a0 \u00a0 \u00a0 ],\n            \"operations\": [\n        \u00a0 \u00a0     #[mo_operation]\n             \u00a0 \u00a0 {\n             \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"service_row_no\": \"\",\n             \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"description\": \"[mo_operation.trx_resource_code]\",\n             \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"op_no\": \"[mo_operation.operation_no]\"\n                 }\n                #[/mo_operation]\n                \u00a0]\n        }\n    ],\n    \"type\": \"UPDATE\"\n}\n</code></pre> Note: This will make the template non-JSON standard. The template syntax will be validated as Xytech compliant on save.<p></p> <p>Example payload generated: </p><pre><code>{\n  \"document\": \"MoMediaOrder\",\n  \"id\": \"109483-1\",\n  \"idField\": \"wo_no_seq\",\n  \"details\": [\n    {\n       \"services\": [\n               {\n          \"description\": \"Color Program/Review - Per Hr\",\n          \"service_row_no\": \"50094\"\n        },\n              {\n          \"description\": \"Color Program/Review - Per Hr\",\n          \"service_row_no\": \"50095\"\n        },\n              {\n          \"description\": \"142 Digital Receipt\",\n          \"service_row_no\": \"229496\"\n        }\n\n        ],\n      \"operations\": [\n                {\n          \"service_row_no\": \"\",\n          \"description\": \"\",\n          \"op_no\": \"71032\"\n        },\n                {\n          \"service_row_no\": \"\",\n          \"description\": \"\",\n          \"op_no\": \"71033\"\n        }\n\n      ]\n    }\n\n  ],\n  \"type\": \"UPDATE\"\n}\n</code></pre><p></p> <p>Please note that the tables cannot be nested within each other, only one level of sub-tables is supported. No restrictions on which table is used to setup the trigger conditions as the code is document based. In other words, if your document is Media Order, you could use any sub table in the trigger conditions and all the available sub tables could be used in the template. (24750)</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#v111","title":"v11.1","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#export-adaptor-custom-headers-override-default","title":"Export Adaptor custom headers override default","text":"<p>You are now able to add a custom header of 'Content-Type' to an Export Adaptor that will override the default generated Content-Type header. Note: you must flag the custom header as a Content Header.</p> <p></p>"},{"location":"Webhooks%20Guide/What%27s%20New/#export-adaptor-logs-improved-capture-of-failures","title":"Export Adaptor Logs improved capture of failures","text":"<p>Webhooks Export Adaptor logging has been enhanced so that errors are logged when the error occurs prior to being able to execute the API call. This gives greater logging visibility to users especially when in the past no log entry would be created and the user would have no awareness.</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#encode-illegal-characters-in-outbound-payload","title":"Encode illegal characters in outbound payload","text":"<p>Webhooks\u00a0Export Adaptor Template now includes encoding of whitespace characters.</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#v110","title":"v11.0","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#response-payload-parsing-and-storing-of-values","title":"Response payload parsing and storing of values","text":"<p>Webhooks now includes the ability to store value(s) received in the response body into a field from the triggered document.</p> <p>This allows Xytech to store the ID generated by an external system as a result of a web hook POST that creates the record. See Export Adaptor</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#url-parameters-now-use-table-names-not-doc-prefix","title":"URL Parameters now use table names (not DOC prefix)","text":"<p>When configuring an Export Adaptor to use URL parameters, to include a filed in the URL the field name is now prefixed by table name (as opposed to DOC) which makes it clearer to understand it's source.</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#get-is-added-as-an-export-adaptor-method","title":"GET is added as an Export Adaptor method","text":"<p>Given the introduction of the response parsing feature, it now makes sense to add the GET method as an option. </p>"},{"location":"Webhooks%20Guide/What%27s%20New/#export-adaptor-square-brackets-allowed","title":"Export Adaptor square brackets allowed","text":"<p>Webhooks, Event Trigger - Export Adaptor payload template will now accept JSON payloads that start with square brackets. The JSON validator will no longer object.</p>"},{"location":"Webhooks%20Guide/What%27s%20New/#v106","title":"v10.6","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#ability-to-define-custom-headers-for-export-adaptors","title":"Ability to define custom headers for Export Adaptors","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#enhanced-url-fail-over-logic-for-outbound-connections","title":"Enhanced URL fail-over logic for Outbound Connections","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#v104","title":"v10.4","text":""},{"location":"Webhooks%20Guide/What%27s%20New/#webhooks-feature-introduced-in-v104","title":"Webhooks Feature Introduced in v10.4","text":""}]}